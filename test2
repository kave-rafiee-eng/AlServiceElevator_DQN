import gymnasium as gym
import torch
import torch.nn as nn
import torch.optim as optim
import random
import numpy as np
from collections import deque

# محیط
#env = gym.make("CartPole-v1", render_mode="human")
env = gym.make("CartPole-v1")

# هایپرپارامترها
STATE_SIZE = env.observation_space.shape[0]
ACTION_SIZE = env.action_space.n
HIDDEN_SIZE = 64
LR = 0.001
GAMMA = 0.99
EPSILON = 1.0
EPSILON_DECAY = 0.995
EPSILON_MIN = 0.01
BATCH_SIZE = 64
MEMORY_SIZE = 10000

# شبکه عصبی ساده
class DQN(nn.Module):
    def __init__(self):
        super(DQN, self).__init__()
        self.fc1 = nn.Linear(STATE_SIZE, HIDDEN_SIZE)
        self.fc2 = nn.Linear(HIDDEN_SIZE, HIDDEN_SIZE)
        self.fc3 = nn.Linear(HIDDEN_SIZE, ACTION_SIZE)
    
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

memory = deque(maxlen=MEMORY_SIZE)
policy_net = DQN()
target_net = DQN()
target_net.load_state_dict(policy_net.state_dict())
optimizer = optim.Adam(policy_net.parameters(), lr=LR)
loss_fn = nn.MSELoss()

def select_action(state, epsilon):
    if random.random() < epsilon:
        return random.randrange(ACTION_SIZE)
    state = torch.FloatTensor(state).unsqueeze(0)
    with torch.no_grad():
        return policy_net(state).argmax().item()
    
def replay():
    if len(memory) < BATCH_SIZE:
        return
    batch = random.sample(memory, BATCH_SIZE)
    states, actions, rewards, next_states, dones = zip(*batch)
    states = torch.FloatTensor(states)
    actions = torch.LongTensor(actions).unsqueeze(1)
    rewards = torch.FloatTensor(rewards)
    next_states = torch.FloatTensor(next_states)
    dones = torch.FloatTensor(dones)

    q_values = policy_net(states).gather(1, actions).squeeze()
    next_q_values = target_net(next_states).max(1)[0]
    expected_q = rewards + GAMMA * next_q_values * (1 - dones)
    
    loss = loss_fn(q_values, expected_q.detach())
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()


EPISODES = 200


for e in range(EPISODES):
    state, info = env.reset()
    done = False
    total_reward = 0
    while not done:
        action = select_action(state, EPSILON)
        next_state, reward, done, truncated, info = env.step(action)
        memory.append((state, action, reward, next_state, float(done)))
        state = next_state
        total_reward += reward
        replay()
        if done or truncated:
            break
    EPSILON = max(EPSILON_MIN, EPSILON * EPSILON_DECAY)
    target_net.load_state_dict(policy_net.state_dict())
    print(f"Episode {e+1}, Reward: {total_reward}, Epsilon: {EPSILON:.3f}")

env.close()

MODEL_PATH = "dqn_cartpole.pth"
# ذخیره مدل آموزش دیده
torch.save(policy_net.state_dict(), MODEL_PATH)
print(f"Model saved to {MODEL_PATH}")

env.close()

# ---------------------
# تست مدل با رندر گرافیکی
# ---------------------
"""
test_env = gym.make("CartPole-v1", render_mode="human")
policy_net.load_state_dict(torch.load(MODEL_PATH))
policy_net.eval()

state, info = test_env.reset()
done = False
while not done:
    action = select_action(state, epsilon=0)  # فقط اکشن بهینه
    state, reward, done, truncated, info = test_env.step(action)
    test_env.render()
    if done or truncated:
        break

test_env.close()
"""